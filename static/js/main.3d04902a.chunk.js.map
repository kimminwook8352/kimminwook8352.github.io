{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Modal","부모값","className","제목들","클릭","Profile","changeProfile","setState","name","age","state","this","onClick","React","Component","App","useState","제목","제목변경","좋아요","좋아요수","모달","모달변경","누른제목","누른제목변경","입력값","입력값변경","newArray","map","글","번호","onChange","e","target","value","arrayCopy","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAAe,I,YCiGf,SAASA,EAAMC,GACb,OACE,sBAAKC,UAAU,QAAf,UACI,6BAAKD,EAAIE,mBAAIF,EAAIG,gBACjB,6CACA,4D,IAUFC,E,kDAGJ,aAAc,IAAD,8BACX,gBAMFC,cAAgB,WACd,EAAKC,SAAS,CAACC,KAAO,uBACtB,EAAKD,SAAS,CAACE,IAAM,QAPrB,EAAKC,MAAO,CAACF,KAAO,qBAAOC,IAAM,IAFtB,E,0CAWb,WACE,OACE,gCACE,gDAASE,KAAKD,MAAMF,QACpB,sDAAUG,KAAKD,MAAMD,OACrB,wBAAQG,QAASD,KAAKL,cAAtB,kC,GAnBcO,IAAMC,WA4BbC,EAtIf,WAEE,MAAiBC,mBAAS,CAAC,UAAU,YAAY,YAAjD,mBAAKC,EAAL,KAASC,EAAT,KACA,EAAiBF,mBAAS,GAA1B,mBAAKG,EAAL,KAASC,EAAT,KACA,EAAiBJ,oBAAS,GAA1B,mBAAKK,EAAL,KAASC,EAAT,KACA,EAAoBN,mBAAS,GAA7B,mBAAKO,EAAL,KAAUC,EAAV,KACA,EAAmBR,mBAAS,IAA5B,mBAAKS,EAAL,KAAUC,EAAV,KA6BA,OAEE,cADA,CACA,OAAKxB,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,mDACA,qBAAKA,UAAU,MAAf,SACE,wBAAQU,QAjBhB,WACE,IAAIe,EAAQ,YAAOV,GACnBU,EAAS,GAAK,WACdT,EAAKS,IAcC,iDAKFV,EAAGW,KAAI,SAASC,EAAGC,GACjB,OACA,sBAAK5B,UAAU,OAAf,UACE,qBAAIU,QAAS,WAAKY,EAAOM,IAAzB,UAAgCD,EAC9B,sBAAMjB,QAAS,WAAKQ,EAAKD,EAAM,IAA/B,0BAA8CA,KAEhD,+DACA,yBALyBW,MAa/B,8BACE,sBAAK5B,UAAU,UAAf,UACE,uBAAO6B,SAAU,SAACC,GAAMN,EAAMM,EAAEC,OAAOC,UACvC,wBAAQtB,QAAS,WACf,IAAIuB,EAAS,YAAOlB,GACpBkB,EAAUC,QAAQX,GAClBP,EAAKiB,IAHP,+BAQJ,wBAAQvB,QAAU,WAAMU,GAAMD,IAA9B,8CAUS,IAAPA,EACE,cAACrB,EAAD,CAAO,qBAAKiB,EAAI,eAAIM,IACpB,KAEJ,cAAC,EAAD,QChFSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3d04902a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable */\nimport React, { useState }  from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nfunction App() {\n\n  let [제목, 제목변경] = useState(['ZenSoft','Sons Soft','FixDine']);  \n  let [좋아요,좋아요수] = useState(0);\n  let [모달, 모달변경] = useState(false);\n  let [누른제목,누른제목변경] = useState(0);\n  let [입력값, 입력값변경] = useState('');\n\n  /*JSX에서 for문을 돌릴때 function을 생성하여 for문*/\n  function 반복된UI(){\n    var 어레이 = [];\n    for(var i = 0; i < 3; i++ ){\n      어레이.push(\n        <div className=\"list\"> \n          <h3>{제목[i]} <span onClick={()=>{좋아요수(좋아요 + 1)}}>👍</span></h3>\n          <p>2월 21일 발행 </p>\n          <hr/>\n        </div>\n      )\n    }\n    return 어레이\n  }\n  \n  /*회사명 버튼 이벤트시 변경하는 함수*/\n  function arrayChg(){\n    var newArray = [...제목];\n    newArray[1] = 'Sons Edu';\n    제목변경(newArray);\n  }\n  /**\n   * <Array, Object state 데이터 수정 방법>\n   *  - 일단 변경함수 써야함\n   *  - 변경함수 (대체할 데이터)\n   *  State는 직접 건들지 맔고 deep copy해서 만듬 양식 [...]\n   */\n  return ( \n    // HTML 양식을 코딩\n    <div className=\"App\">\n      <div className=\"black-nav\">\n        <div>개발Blog</div>\n        <div className=\"chg\">\n          <button onClick={arrayChg}>버튼테스트</button>\n        </div>      \n      </div>\n      {/*반복된UI()*/}\n      {\n        제목.map(function(글, 번호){\n          return (\n          <div className=\"list\" key={번호}> \n            <h3 onClick={()=>{누른제목변경(번호)}}>{글}\n              <span onClick={()=>{좋아요수(좋아요 + 1)}}>👍</span>{좋아요}\n            </h3>\n            <p>2월 21일 발행 </p>\n            <hr/>\n          </div>\n          )\n        })\n      } \n\n      {/* <input onChange={(e)=>{입력값변경(e.target.value)}}/> */}\n\n      <div>\n        <div className=\"publish\">\n          <input onChange={(e)=>{ 입력값변경(e.target.value)}}/>\n          <button onClick={()=>{\n            let arrayCopy = [...제목]; /* Array data값 Decopy후  */\n            arrayCopy.unshift(입력값);\n            제목변경(arrayCopy);\n          }}>저장</button>\n        </div>\n      </div>\n\n      <button onClick={ ()=>{ 모달변경(!모달) } }>\n        {/*\n          !느낌표 기호는 true  \n          왼쪽에 붙이면 false로 바꿔주고,\n          false 왼쪽에 붙이면 true로 바꿔줍니다. \n        */}\n        여닫이 버튼\n      </button>     \n      \n      {\n        모달 === true\n        ? <Modal 제목들={제목} 클릭={누른제목}></Modal>\n        : null\n      }   \n      <Profile/>       \n      \n    </div>\n  )\n}\nfunction Modal(부모값){\n  return(\n    <div className=\"modal\">\n        <h2>{부모값.제목들[부모값.클릭]}</h2>\n        <p>날짜</p>\n        <p>상세내용</p>\n    </div>\n  )\n}\n// ##### 라떼의 React문법 #####\n// class를 하나 만들고 이름을 짓습니다.\n// React.Component 라는 이상한 것을 extends 한다고 써줍니다.\n// constructor(){}함수를 언급 해줍니다.\n// rendor(){}함수 안에 원하는 HTML을 적습니다.\n\nclass Profile extends React.Component{\n  //state 저장할때 constructor 안에 this.state라는 변수에 전부 보관\n  //꺼내쓸때는 this.state.state명 이렇게 쓰면 됨\n  constructor(){\n    super();\n    this.state ={name : '김민욱', age : 42} \n  }\n  //constructior()라는 부분은 변수와 함수가 가득한 class 덩어리를 만들때..  새로운 변수를 넣는 공간\n  //super()는 \"extends 했던 React.Component\" 라는 덩어리에 있던 변수들을 그대로 물려받아 쓰겠다 뜻\n  //super() 밑에서 state를 만들수 있음\n  changeProfile = () => {\n    this.setState({name : '함경민'})\n    this.setState({age : '32'})\n  }\n  render(){\n    return(\n      <div>\n        <h3> 저는 {this.state.name}</h3>\n        <h3> 나이는 {this.state.age}</h3>\n        <button onClick={this.changeProfile}> 버튼</button>\n        {/* {옛날 문법 : this.setState 내장함수를 꼭 써야함} */}\n      </div>\n    )\n    // 주의) 신문법으로 만든 state 변경함수들은 아예 state를 바꿔치기 해주는 역활이고,\n    // 예전문법 setState() 딱 필요한 부분만 수정해주고 나머지는 건들지 않음\n    // 우리가 했던것 1.state 복사복 만들고 2.수정하고 3.복사복을 집어넣고 그런 짓거리가 필요없음\n  }\n}\nexport default App; \n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}